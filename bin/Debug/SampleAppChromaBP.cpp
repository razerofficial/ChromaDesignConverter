// Copyright 1998-2014 Epic Games, Inc. All Rights Reserved.

#include "SampleAppChromaBP.h" //___HACK_UE4_VERSION_4_16_OR_GREATER
#include "UE4ChromaSDKRT.h"
//#include "SampleAppChromaBP.h" //___HACK_UE4_VERSION_4_15_OR_LESS
#include "ChromaSDKPluginBPLibrary.h"
#include "SampleAppButton.h"

//USampleAppChromaBP::USampleAppChromaBP(const FPostConstructInitializeProperties& PCIP) //___HACK_UE4_VERSION_4_8_OR_LESS
//	: Super(PCIP) //___HACK_UE4_VERSION_4_8_OR_LESS
USampleAppChromaBP::USampleAppChromaBP(const FObjectInitializer& ObjectInitializer) //___HACK_UE4_VERSION_4_9_OR_GREATER
	: Super(ObjectInitializer) //___HACK_UE4_VERSION_4_9_OR_GREATER
{
}

int USampleAppChromaBP::min(int a, int b)
{
	if (a < b)
	{
		return a;
	}
	else
	{
		return b;
	}
}
int USampleAppChromaBP::max(int a, int b)
{
	if (a > b)
	{
		return a;
	}
	else
	{
		return b;
	}
}

void USampleAppChromaBP::SampleAppSetupButtonsEffects(const TArray<UButton*>& buttons)
{
	for (int i = 0; i < buttons.Num(); ++i)
	{
		UButton* button = buttons[i];
		if (button)
		{
			USampleAppButton* dynamicButton;
			dynamicButton = NewObject<USampleAppButton>();
			dynamicButton->AddToRoot(); //avoid GC collection
			dynamicButton->Name = button->GetName();
			button->OnClicked.AddDynamic(dynamicButton, &USampleAppButton::HandleClick);
		}
	}
}

void USampleAppChromaBP::SampleAppSampleStart()
{
	if (!UChromaSDKPluginBPLibrary::IsInitialized())
	{
		UChromaSDKPluginBPLibrary::ChromaSDKInit();
	}
}

void USampleAppChromaBP::SampleAppSampleEnd()
{
	if (UChromaSDKPluginBPLibrary::IsInitialized())
	{
		UChromaSDKPluginBPLibrary::ChromaSDKUnInit();
	}
}
#pragma region Autogenerated

void USampleAppChromaBP::SampleAppShowEffect1()
{
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Keyboard, false);
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect1ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect1Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect1Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect1Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect1Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect2Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect3Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// static color
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 255, 0, 0);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect4Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect5Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/ParticlesOut_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect6Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect7Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect8Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect9Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 255, 255, 255);
//integer number of times to blink during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect10Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect11Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Particles2_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect12Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect13Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect14Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect15Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
float speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId+1)/ (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect16Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect17Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect18Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect19Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Trails_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect20Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
FString layer2 = "SampleAppAnimations/Arc3_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect21Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
FString layer2 = "SampleAppAnimations/Arc3_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect22Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
FString layer2 = "SampleAppAnimations/Arc3_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect23Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
FString layer2 = "SampleAppAnimations/Arc3_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect24Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/CircleSmall_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Rainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// copy non zero colors from layer 2 to the base layer where the base layer was non zero
UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFramesName(layer2, baseLayer);
// set a background color
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 255, 0, 0);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25ChromaLink()
{
FString baseLayer = "SampleAppAnimations/Rainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25Headset()
{
FString baseLayer = "SampleAppAnimations/Rainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25Mousepad()
{
FString baseLayer = "SampleAppAnimations/Rainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25Mouse()
{
FString baseLayer = "SampleAppAnimations/Rainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect25Keypad()
{
FString baseLayer = "SampleAppAnimations/Rainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect26Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect27Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect28Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect29Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect30Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect31Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect32Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect33Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect34Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect35Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Movement_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/CircleSmall_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// green
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 0, 255, 0);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// green
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 0, 255, 0);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// green
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 0, 255, 0);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// green
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 0, 255, 0);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect36Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// green
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 0, 255, 0);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect37Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect38Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect39Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033f, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect40()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Keyboard, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect40ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_ChromaLink, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect40Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Headset, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect40Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Mousepad, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect40Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Mouse, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect40Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
FString idleAnimation = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(idleAnimation);
// Set idle animation
UChromaSDKPluginBPLibrary::SetIdleAnimationName(idleAnimation);
// Enable idle animation
UChromaSDKPluginBPLibrary::UseIdleAnimation(EChromaSDKDeviceEnum::DE_Mouse, true);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// Transition from green to red and then stop
int frameCount = 30;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,0,0);
UChromaSDKPluginBPLibrary::MultiplyColorLerpAllFramesName(baseLayer, color1, color2);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, false);
}

void USampleAppChromaBP::SampleAppShowEffect41()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 0, 64);
int maxRow = UChromaSDKPluginBPLibrary::GetMaxRow(EChromaSDKDevice2DEnum::DE_Keyboard);
int maxColumn = UChromaSDKPluginBPLibrary::GetMaxColumn(EChromaSDKDevice2DEnum::DE_Keyboard);
int startColumn = floor(Math.random() * maxColumn) % 22;
int startRow = floor(Math.random() * maxRow) % 6;
FLinearColor color = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
float radius = 0.0;
float speed = 25.0 / (float)frameCount;
int lineWidth = 2;
for (int frameIndex = 0; frameIndex < frameCount; ++frameIndex) {
float stroke = radius;
for (int t = 0; t < lineWidth; ++t) {
for (int i = 0; i < 360; ++i) {
float angle = i * PI / 180.0f;
int r = floor(startRow + stroke * sin(angle));
int c = floor(startColumn + stroke * cos(angle));
if (r >= 0 && r < maxRow &&
c >= 0 && c < maxColumn) {
int key = (r << 8) | c;
UChromaSDKPluginBPLibrary::SetKeyColorName(baseLayer, frameIndex, key, color);
}
}
stroke += speed;
}
radius += speed;
}
// play at top speed
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect41ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect41Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect41Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect41Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect41Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 1;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 0, 64);
int maxRow = UChromaSDKPluginBPLibrary::GetMaxRow(EChromaSDKDevice2DEnum::DE_Keyboard);
int maxColumn = UChromaSDKPluginBPLibrary::GetMaxColumn(EChromaSDKDevice2DEnum::DE_Keyboard);
// pick first key
int pointAColumn = floor(Math.random() * maxColumn) % 22;
int pointARow = floor(Math.random() * maxRow) % 6;
// pick a different second key
int pointBColumn;
int pointBRow;
do {
pointBColumn = floor(Math.random() * maxColumn) % 22;
pointBRow = floor(Math.random() * maxRow) % 6;
} while (pointAColumn == pointBColumn && pointARow == pointBRow);
FLinearColor color = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
int frameIndex = 0;
for (int i = 0.0; i <= 1.0; i += 0.04) { // 1.0/22.0
int r = floor(UChromaSDKPluginBPLibrary::Lerp(pointARow, pointBRow, i));
int c = floor(UChromaSDKPluginBPLibrary::Lerp(pointAColumn, pointBColumn, i));
if (r >= 0 && r < maxRow &&
c >= 0 && c < maxColumn) {
int key = (r << 8) | c;
UChromaSDKPluginBPLibrary::SetKeyColorName(baseLayer, frameIndex, key, color);
}
}
// play at top speed
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42ChromaLink()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42Headset()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42Mousepad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42Mouse()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect42Keypad()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// solid color
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033f, 64, 255, 64);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_W);
keys.Add(EChromaSDKKeyboardKey::KK_A);
keys.Add(EChromaSDKKeyboardKey::KK_S);
keys.Add(EChromaSDKKeyboardKey::KK_D);
keys.Add(EChromaSDKKeyboardKey::KK_P);
keys.Add(EChromaSDKKeyboardKey::KK_M);
keys.Add(EChromaSDKKeyboardKey::KK_F1);
};
FLinearColor color = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::SetKeysColorAllFramesName(baseLayer,  keys, color);
UChromaSDKPluginBPLibrary::SetChromaCustomFlagName(baseLayer, true);
UChromaSDKPluginBPLibrary::SetChromaCustomColorAllFramesName(baseLayer);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43ChromaLink()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43Headset()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43Mousepad()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43Mouse()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect43Keypad()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,0,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44()
{
FString baseLayer = "SampleAppAnimations/Spiral_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Rainbow_Keyboard.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_W);
keys.Add(EChromaSDKKeyboardKey::KK_A);
keys.Add(EChromaSDKKeyboardKey::KK_S);
keys.Add(EChromaSDKKeyboardKey::KK_D);
keys.Add(EChromaSDKKeyboardKey::KK_P);
keys.Add(EChromaSDKKeyboardKey::KK_M);
keys.Add(EChromaSDKKeyboardKey::KK_F1);
};
UChromaSDKPluginBPLibrary::CopyKeysColorAllFramesName(layer2, baseLayer, keys);
UChromaSDKPluginBPLibrary::SetChromaCustomFlagName(baseLayer, true);
UChromaSDKPluginBPLibrary::SetChromaCustomColorAllFramesName(baseLayer);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44ChromaLink()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_ChromaLink.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44Headset()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Headset.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44Mousepad()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mousepad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44Mouse()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Mouse.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect44Keypad()
{
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keypad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(32,32,32);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(64,64,64);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45()
{
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 120;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 64, 64, 64);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_W);
keys.Add(EChromaSDKKeyboardKey::KK_A);
keys.Add(EChromaSDKKeyboardKey::KK_S);
keys.Add(EChromaSDKKeyboardKey::KK_D);
};
UChromaSDKPluginBPLibrary::SetKeysColorAllFramesRGBName(baseLayer,  keys, 255, 255, 0);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_F1);
keys.Add(EChromaSDKKeyboardKey::KK_F2);
keys.Add(EChromaSDKKeyboardKey::KK_F3);
keys.Add(EChromaSDKKeyboardKey::KK_F4);
keys.Add(EChromaSDKKeyboardKey::KK_F5);
keys.Add(EChromaSDKKeyboardKey::KK_F6);
};
float t = 0;
float speed = 0.05;
for (int frameId = 0; frameId < frameCount; ++frameId) {
t += speed;
float hp = fabsf(cos(PI / 2.0f + t));
for (int i = 0; i < keys.length; ++i) {
int ratio = (i+1) / keys.length;
FLinearColor color = UChromaSDKPluginBPLibrary::GetRGB(0, 255*(1-hp), 0);
if ((i+1) / (keys.length+1) < hp) {
color = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0);
} else {
color = UChromaSDKPluginBPLibrary::GetRGB(0, 100, 0);
}
int key = keys[i];
UChromaSDKPluginBPLibrary::SetKeyColorName(baseLayer, frameId, key, color);
}
}
UChromaSDKPluginBPLibrary::SetChromaCustomFlagName(baseLayer, true);
UChromaSDKPluginBPLibrary::SetChromaCustomColorAllFramesName(baseLayer);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45ChromaLink()
{
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45Headset()
{
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45Mousepad()
{
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45Mouse()
{
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect45Keypad()
{
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(0,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46()
{
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 120;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 64, 64, 64);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_W);
keys.Add(EChromaSDKKeyboardKey::KK_A);
keys.Add(EChromaSDKKeyboardKey::KK_S);
keys.Add(EChromaSDKKeyboardKey::KK_D);
};
UChromaSDKPluginBPLibrary::SetKeysColorAllFramesRGBName(baseLayer,  keys, 255, 0, 0);
{
TArray<TEnumAsByte<EChromaSDKKeyboardKey::Type>> keys;
keys.Add(EChromaSDKKeyboardKey::KK_F7);
keys.Add(EChromaSDKKeyboardKey::KK_F8);
keys.Add(EChromaSDKKeyboardKey::KK_F9);
keys.Add(EChromaSDKKeyboardKey::KK_F10);
keys.Add(EChromaSDKKeyboardKey::KK_F11);
keys.Add(EChromaSDKKeyboardKey::KK_F12);
};
float t = 0;
float speed = 0.05;
for (int frameId = 0; frameId < frameCount; ++frameId) {
t += speed;
float hp = fabsf(cos(PI / 2.0f + t));
for (int i = 0; i < keys.length; ++i) {
int ratio = (i+1) / keys.length;
FLinearColor color = UChromaSDKPluginBPLibrary::GetRGB(255*(1-hp), 255*(1-hp), 0);
if ((i+1) / (keys.length+1) < hp) {
color = UChromaSDKPluginBPLibrary::GetRGB(255, 255, 0);
} else {
color = UChromaSDKPluginBPLibrary::GetRGB(100, 100, 0);
}
int key = keys[i];
UChromaSDKPluginBPLibrary::SetKeyColorName(baseLayer, frameId, key, color);
}
}
UChromaSDKPluginBPLibrary::SetChromaCustomFlagName(baseLayer, true);
UChromaSDKPluginBPLibrary::SetChromaCustomColorAllFramesName(baseLayer);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46ChromaLink()
{
FString baseLayer = "SampleAppAnimations/Blank_ChromaLink.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46Headset()
{
FString baseLayer = "SampleAppAnimations/Blank_Headset.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46Mousepad()
{
FString baseLayer = "SampleAppAnimations/Blank_Mousepad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46Mouse()
{
FString baseLayer = "SampleAppAnimations/Blank_Mouse.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowEffect46Keypad()
{
FString baseLayer = "SampleAppAnimations/Blank_Keypad.chroma";
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 50;
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.1f, 255, 255, 255);
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, frameCount/2);
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, frameCount/2);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(64,64,0);
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(255,255,0);
UChromaSDKPluginBPLibrary::MultiplyTargetColorLerpAllFramesName(baseLayer, color1, color2);
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}
#pragma endregion
/*
case 1:
ShowEffect1();
ShowEffect1ChromaLink();
ShowEffect1Headset();
ShowEffect1Keypad();
ShowEffect1Mousepad();
ShowEffect1Mouse();
break;
case 2:
ShowEffect2();
ShowEffect2ChromaLink();
ShowEffect2Headset();
ShowEffect2Keypad();
ShowEffect2Mousepad();
ShowEffect2Mouse();
break;
case 3:
ShowEffect3();
ShowEffect3ChromaLink();
ShowEffect3Headset();
ShowEffect3Keypad();
ShowEffect3Mousepad();
ShowEffect3Mouse();
break;
case 4:
ShowEffect4();
ShowEffect4ChromaLink();
ShowEffect4Headset();
ShowEffect4Keypad();
ShowEffect4Mousepad();
ShowEffect4Mouse();
break;
case 5:
ShowEffect5();
ShowEffect5ChromaLink();
ShowEffect5Headset();
ShowEffect5Keypad();
ShowEffect5Mousepad();
ShowEffect5Mouse();
break;
case 6:
ShowEffect6();
ShowEffect6ChromaLink();
ShowEffect6Headset();
ShowEffect6Keypad();
ShowEffect6Mousepad();
ShowEffect6Mouse();
break;
case 7:
ShowEffect7();
ShowEffect7ChromaLink();
ShowEffect7Headset();
ShowEffect7Keypad();
ShowEffect7Mousepad();
ShowEffect7Mouse();
break;
case 8:
ShowEffect8();
ShowEffect8ChromaLink();
ShowEffect8Headset();
ShowEffect8Keypad();
ShowEffect8Mousepad();
ShowEffect8Mouse();
break;
case 9:
ShowEffect9();
ShowEffect9ChromaLink();
ShowEffect9Headset();
ShowEffect9Keypad();
ShowEffect9Mousepad();
ShowEffect9Mouse();
break;
case 10:
ShowEffect10();
ShowEffect10ChromaLink();
ShowEffect10Headset();
ShowEffect10Keypad();
ShowEffect10Mousepad();
ShowEffect10Mouse();
break;
case 11:
ShowEffect11();
ShowEffect11ChromaLink();
ShowEffect11Headset();
ShowEffect11Keypad();
ShowEffect11Mousepad();
ShowEffect11Mouse();
break;
case 12:
ShowEffect12();
ShowEffect12ChromaLink();
ShowEffect12Headset();
ShowEffect12Keypad();
ShowEffect12Mousepad();
ShowEffect12Mouse();
break;
case 13:
ShowEffect13();
ShowEffect13ChromaLink();
ShowEffect13Headset();
ShowEffect13Keypad();
ShowEffect13Mousepad();
ShowEffect13Mouse();
break;
case 14:
ShowEffect14();
ShowEffect14ChromaLink();
ShowEffect14Headset();
ShowEffect14Keypad();
ShowEffect14Mousepad();
ShowEffect14Mouse();
break;
case 15:
ShowEffect15();
ShowEffect15ChromaLink();
ShowEffect15Headset();
ShowEffect15Keypad();
ShowEffect15Mousepad();
ShowEffect15Mouse();
break;
case 16:
ShowEffect16();
ShowEffect16ChromaLink();
ShowEffect16Headset();
ShowEffect16Keypad();
ShowEffect16Mousepad();
ShowEffect16Mouse();
break;
case 17:
ShowEffect17();
ShowEffect17ChromaLink();
ShowEffect17Headset();
ShowEffect17Keypad();
ShowEffect17Mousepad();
ShowEffect17Mouse();
break;
case 18:
ShowEffect18();
ShowEffect18ChromaLink();
ShowEffect18Headset();
ShowEffect18Keypad();
ShowEffect18Mousepad();
ShowEffect18Mouse();
break;
case 19:
ShowEffect19();
ShowEffect19ChromaLink();
ShowEffect19Headset();
ShowEffect19Keypad();
ShowEffect19Mousepad();
ShowEffect19Mouse();
break;
case 20:
ShowEffect20();
ShowEffect20ChromaLink();
ShowEffect20Headset();
ShowEffect20Keypad();
ShowEffect20Mousepad();
ShowEffect20Mouse();
break;
case 21:
ShowEffect21();
ShowEffect21ChromaLink();
ShowEffect21Headset();
ShowEffect21Keypad();
ShowEffect21Mousepad();
ShowEffect21Mouse();
break;
case 22:
ShowEffect22();
ShowEffect22ChromaLink();
ShowEffect22Headset();
ShowEffect22Keypad();
ShowEffect22Mousepad();
ShowEffect22Mouse();
break;
case 23:
ShowEffect23();
ShowEffect23ChromaLink();
ShowEffect23Headset();
ShowEffect23Keypad();
ShowEffect23Mousepad();
ShowEffect23Mouse();
break;
case 24:
ShowEffect24();
ShowEffect24ChromaLink();
ShowEffect24Headset();
ShowEffect24Keypad();
ShowEffect24Mousepad();
ShowEffect24Mouse();
break;
case 25:
ShowEffect25();
ShowEffect25ChromaLink();
ShowEffect25Headset();
ShowEffect25Keypad();
ShowEffect25Mousepad();
ShowEffect25Mouse();
break;
case 26:
ShowEffect26();
ShowEffect26ChromaLink();
ShowEffect26Headset();
ShowEffect26Keypad();
ShowEffect26Mousepad();
ShowEffect26Mouse();
break;
case 27:
ShowEffect27();
ShowEffect27ChromaLink();
ShowEffect27Headset();
ShowEffect27Keypad();
ShowEffect27Mousepad();
ShowEffect27Mouse();
break;
case 28:
ShowEffect28();
ShowEffect28ChromaLink();
ShowEffect28Headset();
ShowEffect28Keypad();
ShowEffect28Mousepad();
ShowEffect28Mouse();
break;
case 29:
ShowEffect29();
ShowEffect29ChromaLink();
ShowEffect29Headset();
ShowEffect29Keypad();
ShowEffect29Mousepad();
ShowEffect29Mouse();
break;
case 30:
ShowEffect30();
ShowEffect30ChromaLink();
ShowEffect30Headset();
ShowEffect30Keypad();
ShowEffect30Mousepad();
ShowEffect30Mouse();
break;
case 31:
ShowEffect31();
ShowEffect31ChromaLink();
ShowEffect31Headset();
ShowEffect31Keypad();
ShowEffect31Mousepad();
ShowEffect31Mouse();
break;
case 32:
ShowEffect32();
ShowEffect32ChromaLink();
ShowEffect32Headset();
ShowEffect32Keypad();
ShowEffect32Mousepad();
ShowEffect32Mouse();
break;
case 33:
ShowEffect33();
ShowEffect33ChromaLink();
ShowEffect33Headset();
ShowEffect33Keypad();
ShowEffect33Mousepad();
ShowEffect33Mouse();
break;
case 34:
ShowEffect34();
ShowEffect34ChromaLink();
ShowEffect34Headset();
ShowEffect34Keypad();
ShowEffect34Mousepad();
ShowEffect34Mouse();
break;
case 35:
ShowEffect35();
ShowEffect35ChromaLink();
ShowEffect35Headset();
ShowEffect35Keypad();
ShowEffect35Mousepad();
ShowEffect35Mouse();
break;
case 36:
ShowEffect36();
ShowEffect36ChromaLink();
ShowEffect36Headset();
ShowEffect36Keypad();
ShowEffect36Mousepad();
ShowEffect36Mouse();
break;
case 37:
ShowEffect37();
ShowEffect37ChromaLink();
ShowEffect37Headset();
ShowEffect37Keypad();
ShowEffect37Mousepad();
ShowEffect37Mouse();
break;
case 38:
ShowEffect38();
ShowEffect38ChromaLink();
ShowEffect38Headset();
ShowEffect38Keypad();
ShowEffect38Mousepad();
ShowEffect38Mouse();
break;
case 39:
ShowEffect39();
ShowEffect39ChromaLink();
ShowEffect39Headset();
ShowEffect39Keypad();
ShowEffect39Mousepad();
ShowEffect39Mouse();
break;
case 40:
ShowEffect40();
ShowEffect40ChromaLink();
ShowEffect40Headset();
ShowEffect40Keypad();
ShowEffect40Mousepad();
ShowEffect40Mouse();
break;
case 41:
ShowEffect41();
ShowEffect41ChromaLink();
ShowEffect41Headset();
ShowEffect41Keypad();
ShowEffect41Mousepad();
ShowEffect41Mouse();
break;
case 42:
ShowEffect42();
ShowEffect42ChromaLink();
ShowEffect42Headset();
ShowEffect42Keypad();
ShowEffect42Mousepad();
ShowEffect42Mouse();
break;
case 43:
ShowEffect43();
ShowEffect43ChromaLink();
ShowEffect43Headset();
ShowEffect43Keypad();
ShowEffect43Mousepad();
ShowEffect43Mouse();
break;
case 44:
ShowEffect44();
ShowEffect44ChromaLink();
ShowEffect44Headset();
ShowEffect44Keypad();
ShowEffect44Mousepad();
ShowEffect44Mouse();
break;
case 45:
ShowEffect45();
ShowEffect45ChromaLink();
ShowEffect45Headset();
ShowEffect45Keypad();
ShowEffect45Mousepad();
ShowEffect45Mouse();
break;
case 46:
ShowEffect46();
ShowEffect46ChromaLink();
ShowEffect46Headset();
ShowEffect46Keypad();
ShowEffect46Mousepad();
ShowEffect46Mouse();
break;
*/
