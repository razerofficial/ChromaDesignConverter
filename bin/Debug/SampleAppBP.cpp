// Copyright 1998-2014 Epic SampleApps, Inc. All Rights Reserved.

//#include "SampleAppChromaBP.h" //___HACK_UE4_VERSION_4_16_OR_GREATER
#include "UE4ChromaSDKRT.h"
#include "SampleAppChromaBP.h" //___HACK_UE4_VERSION_4_15_OR_LESS
#include "ChromaSDKPluginBPLibrary.h"
#include "SampleAppButton.h"

USampleAppChromaBP::USampleAppChromaBP(const FPostConstructInitializeProperties& PCIP) //___HACK_UE4_VERSION_4_8_OR_LESS
	: Super(PCIP) //___HACK_UE4_VERSION_4_8_OR_LESS
//USampleAppChromaBP::USampleAppChromaBP(const FObjectInitializer& ObjectInitializer) //___HACK_UE4_VERSION_4_9_OR_GREATER
//	: Super(ObjectInitializer) //___HACK_UE4_VERSION_4_9_OR_GREATER
{
}

int USampleAppChromaBP::min(int a, int b)
{
	if (a < b)
	{
		return a;
	}
	else
	{
		return b;
	}
}
int USampleAppChromaBP::max(int a, int b)
{
	if (a > b)
	{
		return a;
	}
	else
	{
		return b;
	}
}

void USampleAppChromaBP::SampleAppSetupButtonsEffects(const TArray<UButton*>& buttons)
{
	for (int i = 0; i < buttons.Num(); ++i)
	{
		UButton* button = buttons[i];
		if (button)
		{
			USampleAppButton* dynamicButton;
			dynamicButton = NewObject<USampleAppButton>();
			dynamicButton->AddToRoot(); //avoid GC collection
			dynamicButton->Name = button->GetName();
			button->OnClicked.AddDynamic(dynamicButton, &USampleAppButton::HandleClick);
		}
	}
}

void USampleAppChromaBP::SampleAppSampleStart()
{
	if (!UChromaSDKPluginBPLibrary::IsInitialized())
	{
		UChromaSDKPluginBPLibrary::ChromaSDKInit();
	}
}

void USampleAppChromaBP::SampleAppSampleEnd()
{
	if (UChromaSDKPluginBPLibrary::IsInitialized())
	{
		UChromaSDKPluginBPLibrary::ChromaSDKUnInit();
	}
}
#pragma region Autogenerated

void USampleAppChromaBP::SampleAppShowTableEffect1()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Sprite1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect2()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect3()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set middle color green
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 0);
int minThreshold = 50; //set outer color to red
int maxThreshold = 150; //set main color to blue
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 255, 0, 0, maxThreshold, 0, 0, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect4()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/OutParticle1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect5()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/OutParticle1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// turn grayscale particles to blue water
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect6()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect7()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033, 255, 255, 255);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect8()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033, 255, 255, 255);
// fade the start of the animation starting at frame zero to 40
UChromaSDKPluginBPLibrary::FadeStartFramesName(baseLayer, 40);
// fade the end of the animation starting at frame length - 40 (60)
UChromaSDKPluginBPLibrary::FadeEndFramesName(baseLayer, 40);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect9()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// the length of the animation
int frameCount = 50;
// set all frames to white, with all frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesRGBName(baseLayer, frameCount, 0.033, 255, 255, 255);
//integer number of times to blink during animation
int speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve, subtracting from one inverts the curve
float t = 1 - fabsf(cos(speed * PI * (frameId + 1) / (float)frameCount));
// multiply the frame by the 't' intensity
UChromaSDKPluginBPLibrary::MultiplyIntensityName(baseLayer, frameId, t);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect10()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Clouds1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect11()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Clouds1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce the intensity of the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesName(baseLayer, 0.25);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect12()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect13()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityRGBName(baseLayer, frameId, 255, 255, 0); //yellow
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect14()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::MultiplyIntensityAllFramesRGBName(baseLayer, 0, 255, 255); //cyan
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect15()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/BlackAndWhiteRainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
FLinearColor color1 = UChromaSDKPluginBPLibrary::GetRGB(255, 0, 0); //red
FLinearColor color2 = UChromaSDKPluginBPLibrary::GetRGB(0, 255, 0); //green
//integer number of times to transition during animation
int speed = 2;
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
//Math.cos gives a smooth 1 to 0 to 1 curve
float t = fabsf(cos(speed * PI * (frameId + 1) / (float)frameCount));
// use t to transition from color 1 to color 2
FLinearColor color = UChromaSDKPluginBPLibrary::LerpColor(color1, color2, t);
// give color to the layer
UChromaSDKPluginBPLibrary::MultiplyIntensityColorName(baseLayer, frameId, color);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect16()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect17()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(baseLayer);
// loop over all frames in the layer
for (int frameId = 0; frameId < frameCount; ++frameId) {
int threshold = 100;
// give color to the layer
UChromaSDKPluginBPLibrary::FillThresholdColorsRGBName(baseLayer, frameId, threshold, 255, 0, 0);
}
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect18()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int threshold = 50;
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesRGBName(baseLayer, threshold, 0, 64, 0); //dark green
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect19()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Tongue1_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int minThreshold = 50; //dark cyan
int maxThreshold = 150; //purple
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 63, 63, maxThreshold, 127, 0, 127);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect20()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect21()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect22()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, background);
// replace darker colors with background color
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(layer2, 64, background);
// copy non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::CopyNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect23()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::AddNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect24()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Arc3_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
// setup background color on the base layer
FLinearColor background = UChromaSDKPluginBPLibrary::GetRGB(127, 0, 0);
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, background);
// Add non zero colors from layer 2 to the base layer
UChromaSDKPluginBPLibrary::SubtractNonZeroAllKeysAllFramesName(layer2, baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect25()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/CircleSmall_Keyboard.chroma";
FString layer2 = "SampleAppAnimations/Rainbow_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
UChromaSDKPluginBPLibrary::CloseAnimationName(layer2);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
UChromaSDKPluginBPLibrary::GetAnimation(layer2);
int frameCount = UChromaSDKPluginBPLibrary::GetFrameCountName(layer2);
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// copy non zero colors from layer 2 to the base layer where the base layer was non zero
UChromaSDKPluginBPLibrary::CopyNonZeroTargetAllKeysAllFramesName(layer2, baseLayer);
// set a background color
UChromaSDKPluginBPLibrary::FillZeroColorAllFramesRGBName(baseLayer, 255, 0, 0);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect26()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect27()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect28()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reverse the order of frames
UChromaSDKPluginBPLibrary::ReverseAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect29()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// invert all the animation colors
UChromaSDKPluginBPLibrary::InvertColorsAllFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect30()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// duplicate and mirror
UChromaSDKPluginBPLibrary::DuplicateMirrorFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect31()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// insert a pause
int frameId = 50;
int delay = 20;
UChromaSDKPluginBPLibrary::InsertDelayName(baseLayer, frameId, delay);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect32()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// reduce half of the frames, remove every 2nd frame
UChromaSDKPluginBPLibrary::ReduceFramesName(baseLayer, 2);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect33()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// double the number of the frames
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect34()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect35()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/MovementUpLeft_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
// trim the start of the animation, so it starts at frame 10
UChromaSDKPluginBPLibrary::TrimStartFramesName(baseLayer, 10);
// trim the end of the animation
UChromaSDKPluginBPLibrary::TrimEndFramesName(baseLayer, 75);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect36()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/CircleSmall_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
UChromaSDKPluginBPLibrary::DuplicateFirstFrameName(baseLayer, frameCount);
// set animation playback to 30 FPS
UChromaSDKPluginBPLibrary::OverrideFrameDurationName(baseLayer, 0.033f);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect37()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect38()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
// make random colors more sparse using threshold
int threshold = 240;
// turn lower intensity colors to black
UChromaSDKPluginBPLibrary::FillThresholdColorsAllFramesName(baseLayer, threshold, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}

void USampleAppChromaBP::SampleAppShowTableEffect39()
{
// start with a blank animation
FString baseLayer = "SampleAppAnimations/Blank_Keyboard.chroma";
// close the blank animation if it's already loaded, discarding any changes
UChromaSDKPluginBPLibrary::CloseAnimationName(baseLayer);
// open the blank animation, passing a reference to the base animation when loading has completed
UChromaSDKPluginBPLibrary::GetAnimation(baseLayer);
int frameCount = 20;
// Start with blank frames set to 30FPS
UChromaSDKPluginBPLibrary::MakeBlankFramesName(baseLayer, frameCount, 0.033, UChromaSDKPluginBPLibrary::ToLinearColor(0));
// Fill all frames with black and white static
UChromaSDKPluginBPLibrary::FillRandomColorsBlackAndWhiteAllFramesName(baseLayer);
// slow down the random frames so it can be seen
UChromaSDKPluginBPLibrary::DuplicateFramesName(baseLayer);
int minThreshold = 240; //black
int maxThreshold = 240; //rain
UChromaSDKPluginBPLibrary::FillThresholdColorsMinMaxAllFramesRGBName(baseLayer, minThreshold, 0, 0, 0, maxThreshold, 0, 127, 255);
// play the animation on the dynamic canvas
UChromaSDKPluginBPLibrary::PlayAnimationName(baseLayer, true);
}
#pragma endregion
